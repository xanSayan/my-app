[{"C:\\Projects\\my-app\\src\\index.js":"1","C:\\Projects\\my-app\\src\\reducer.js":"2","C:\\Projects\\my-app\\src\\App.js":"3","C:\\Projects\\my-app\\src\\Data.js":"4","C:\\Projects\\my-app\\src\\Create.js":"5","C:\\Projects\\my-app\\src\\ListComponent.js":"6"},{"size":624,"mtime":1610872047651,"results":"7","hashOfConfig":"8"},{"size":2013,"mtime":1610872495660,"results":"9","hashOfConfig":"8"},{"size":2002,"mtime":1610873141464,"results":"10","hashOfConfig":"8"},{"size":783,"mtime":1610871761503,"results":"11","hashOfConfig":"8"},{"size":3102,"mtime":1610873101273,"results":"12","hashOfConfig":"8"},{"size":2045,"mtime":1610872833188,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"n115sk",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Projects\\my-app\\src\\index.js",[],["28","29","30","31","32"],"C:\\Projects\\my-app\\src\\reducer.js",[],"C:\\Projects\\my-app\\src\\App.js",[],"C:\\Projects\\my-app\\src\\Data.js",[],"C:\\Projects\\my-app\\src\\Create.js",["33"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Input, Button } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { createUser, isLoading, createTodo } from './reducer';\r\n\r\nconst delay = async (duration = 1000) => {\r\n  await new Promise((resolve) => setTimeout(resolve, duration));\r\n  return undefined;\r\n};\r\n\r\nclass Create extends Component {\r\n  handleSubmit = (e) => {\r\n    const {\r\n      form: { validateFields },\r\n      dispatch,\r\n      type,\r\n    } = this.props;\r\n    e.preventDefault();\r\n\r\n    validateFields(async (err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n      }\r\n      dispatch(isLoading(true));\r\n      await delay(2000);\r\n      if (type === 'users') {\r\n        dispatch(createUser(values));\r\n      } else {\r\n        const todo = {\r\n          todoAction: values.action,\r\n          dateAdded: values.date,\r\n        };\r\n        dispatch(createTodo(todo));\r\n      }\r\n      dispatch(isLoading(false));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      form: { getFieldDecorator },\r\n      type,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n          {type === 'users' && (\r\n            <div>\r\n              <Form.Item label=\"Name\">\r\n                {getFieldDecorator('name', {\r\n                  rules: [\r\n                    { required: true, message: 'Please input your name!' },\r\n                  ],\r\n                })(<Input placeholder=\"Name\" />)}\r\n              </Form.Item>\r\n              <Form.Item label=\"Email\">\r\n                {getFieldDecorator('email', {\r\n                  rules: [\r\n                    { required: true, message: 'Please input your email!' },\r\n                  ],\r\n                })(<Input placeholder=\"Email\" />)}\r\n              </Form.Item>\r\n            </div>\r\n          )}\r\n          {type === 'todos' && (\r\n            <div>\r\n              <Form.Item label=\"Action\">\r\n                {getFieldDecorator('action', {\r\n                  rules: [\r\n                    { required: true, message: 'Please input your action!' },\r\n                  ],\r\n                })(<Input placeholder=\"Action\" />)}\r\n              </Form.Item>\r\n              <Form.Item label=\"Date\">\r\n                {getFieldDecorator('date', {\r\n                  rules: [\r\n                    { required: true, message: 'Please input your date!' },\r\n                  ],\r\n                })(<Input placeholder=\"Date\" />)}\r\n              </Form.Item>\r\n            </div>\r\n          )}\r\n          <Form.Item>\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-form-button\"\r\n            >\r\n              Create\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCreate.propTypes = {\r\n  type: PropTypes.oneOf(['users', 'todos']),\r\n};\r\n\r\nCreate.defaultProps = {\r\n  type: 'users',\r\n};\r\n\r\nconst WrappedCreate = Form.create({ name: 'create' })(Create);\r\n\r\nexport default connect()(WrappedCreate);\r\n","C:\\Projects\\my-app\\src\\ListComponent.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":23,"column":9,"nodeType":"46","messageId":"47","endLine":23,"endColumn":20},"lines-around-directive",["48"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]